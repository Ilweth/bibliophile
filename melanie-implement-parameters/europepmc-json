#! /bin/bash
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
# This script is made to collect search results on europepmc website :
# User enters the search terms as arguments of the script, using the option 
# --search-terms, or writes them in a file (url encoded), given as an argument
# as well. The script makes the query on the website and returns the results on
# the standard output.
#**

TMP_DIR="${TMPDIR}"

set -ue
## set -x

script() { echo "# $*"; cat; }
setvar() { eval $1="'$3'"; }

setvar INFO          = '$Id$'
setvar FILES         = ""
setvar SEARCH_TERMS  = ""
setvar BASENAME      = "$(basename $0)"
setvar HITCOUNT_ONLY = false
setvar URLENCODE     = false
setvar serverURL     = http://www.ebi.ac.uk
setvar resourcePATH  = europepmc/webservices/rest/search
setvar pageSize      = 1000
setvar cursorMark    = '*'
setvar format        = json

#** USAGE:
#**   $0 --options 'search_term_1+search_term_2' files*.inp
#**
#** /!\ search terms in files must be url-encoded ! /!\
#**     (beforehand, or using '--URL-Encoding' option)
#**
#** OPTIONS:
#**  --version         Prints name, version, date and author of the script.
#**
#**  --search-terms    Add search terms (in quotes) as arguments after this
#**   -s               option. They will be url encoded in the script.
#**
#**  --help            Prints short help message (this message) and exit.
#**
#**  --URL-Encoding    Url encodes the content of the file(s).
#**   -U
#**
#**  -n                Prints the number of results

while [ $# -gt 0 ]
do
    case $1 in
        --version|--versio|--versi|--vers|--ver|--ve|--v)
            echo $INFO
            exit
            ;;
        --help|--hel|--he|--h)
            awk '/#\*/,/#\*\*/ {
                    sub("^ *#[*]?[*]?", ""); \
                    gsub("\\$0","'$(basename $0)'"); \
                    print $0
                }' $0
            exit
            ;;
        --search-terms|--search-term|--search|--searc|--sear|--sea|--se|--s|-s)
            SEARCH_TERMS="$2"
            shift
            ;;
        --options|--option)
            echo "$0: '--options' is a place-holder; " \
                 "please use '$0 --help' to get the list of available options."
            exit 2
            ;;
        --URL-Encoding|--URL|-U)
            URLENCODE=true
            ;;
        -n)
            HITCOUNT_ONLY=true
            ;;
        -*) echo "$0: unknown option '$1'" >&2 ; exit 1 ;;
        *)  FILES="${FILES} '$1'" ;;
    esac
    shift
done

echo 'files : '${FILES} 
echo 'search terms : '${SEARCH_TERMS}

eval set -- "${FILES}"

if [ "${SEARCH_TERM}" = "" ]
then 
    cat "$@"
else
    echo "${SEARCH_TERM}"\
    | perl -MURI::Encode -nle \
        'print URI::Encode::uri_encode($_,{encode_reserved=>1})'\
    | sed 's/%20/+/g'
    if [ $# -gt 0 ]
    then
        cat "$@"
    fi
fi \
| grep -vP '^\s*$|^#' \
| if [ $URLENCODE  = true ]
then
    perl -MURI::Encode -nle \
        'print URI::Encode::uri_encode($_,{encode_reserved=>1})'\
    | sed 's/%20/+/g'
else
    cat "$@"
fi \
| while read SEARCH_TERM
do
    setvar request  = query="${SEARCH_TERMS}"
    setvar queryURL = "$serverURL/$resourcePATH?$request"
    setvar result   = "$(curl -sSL "$queryURL&format=json&pageSize=1")"
    n=$(echo "$result" | jq . | awk '/hitCount/{print $2}' | sed 's/,//')

    if [ $HITCOUNT_ONLY = true ]
        echo -e $n"\t": ${SEARCH_TERMS}
    else
        j=$(expr $n / $pageSize)    
        if [ $(expr $n % $pageSize) -gt 0 ]
        then
            j=$(expr $j + 1)
        fi

        setvar options = "format=$format&pageSize=$pageSize"

        for i in $(seq 1 $j) ;
        do
            result="$(curl -sSL \
            "$queryURL&cursorMark=$cursorMark&$options")"
            echo "$result"
            cursorMark=$(echo "$result" \
               | jq . | awk '/nextCursorMark/{print $2}' | sed 's/[",]//g')
        done
    fi
done

test -z "${TMP_DIR}" && TMP_DIR="/tmp"
TMP_DIR="${TMP_DIR}/tmp-${BASENAME}-$$"
mkdir "${TMP_DIR}"

## trap "rm -rf '${TMP_DIR}'" 1 2 3 15
trap "rm -rf '${TMP_DIR}'" HUP INT QUIT TERM

set -x

## sleep 6

rm -rf "${TMP_DIR}"

