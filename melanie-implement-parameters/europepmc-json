#! /bin/bash
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
# This script is made to collect search results on europepmc website :
# User enters the search terms as arguments of the script, using the option 
# '--search-terms', or writes them in a file (url encoded beforehand, or using
# '--url-encode' option), given as an argument as well. The script makes the
# query on the website and returns the results on the standard output.
#**
TMP_DIR="${TMPDIR}"

set -ue

script() { echo "# $*" >&2 ; }

INFO='$Id$'
FILES=""
SEARCH_TERMS=""
BASENAME="$(basename $0)"
HITCOUNT_ONLY=false
URLENCODE=false
serverURL=http://www.ebi.ac.uk
resourcePATH=europepmc/webservices/rest/search
pageSize=1000
format=json
script=""

#** USAGE:
#**   $0 --options 'search_term_1+search_term_2' files*.inp
#**
#** OPTIONS:
#**  -c, --count-only   Prints the number of results.
#**
#**  --ps, --page-size '10'
#**                     Modify the number of results per page (default is 1000).
#**
#**  --script           Prints out the command lines as comment without
#**                     executing them.
#**
#**  -s, --search-terms 'crystal+structure'
#**                     Add search terms (in quotes) as arguments after this
#**                     option.
#**
#**  -U, --url-encode   Url encode all search terms.
#**
#**  --version          Prints name, version, date and author of the script.
#**
#**  --help             Prints short help message (this message) and exit.

while [ $# -gt 0 ]
do
    case $1 in
        --help|--hel|--he|--h)
            awk '/#\*/,/#\*\*/ {
                    sub("^ *#[*]?[*]?", ""); \
                    gsub("\\$0","'$(basename $0)'"); \
                    print $0
                }' $0
            exit 0
            ;;
        -c|--count-only|--count-onl|--count-on|--count-o|--count|--coun|--cou| \
        --co|--c)
            HITCOUNT_ONLY=true
            ;;
        --options|--option|--optio|--opti|--opt|--op|--o)
            echo "$0: WARNING, '--options' is a place-holder; " \
                 "please use '$0 --help' to get the list of "\
                 "available options." >&2
            ;;
        --ps|--page-size|--page-siz|--page-si|--page-s|--page|--pag|--pa|--p)
            pageSize="$2"
            shift
            ;;
        --script)
            script=script
            ;;
        -s|--search-terms|--search-term|--search-ter|--search-te|--search-t| \
        --search|--searc|--sear|--sea|--se|--s)
            SEARCH_TERMS="$2"
            if [ -z "${SEARCH_TERMS}" ]
            then
                echo "$0: WARNING, search term is empty for '--search-term'" >&2
            fi
            shift
            ;;
        --url-encode|--url-encod|--url-enco|--url-enc|--url-en|--url-e|--url| \
        --ur|--u|--URL|-U|--encode)
            URLENCODE=true
            ;;
        --version|--versio|--versi|--vers|--ver|--ve|--v)
            echo $INFO
            exit 0
            ;;
        -*) echo "$0: ERROR, unknown option '$1', "\
            "please use '$0 --help' to get the list of available options." >&2
            exit 1
            ;;
        *)  FILES="${FILES} '$1'" ;;
    esac
    shift
done

echo "$0: NOTE, files : "${FILES} >&2
echo "$0: NOTE, search terms : "${SEARCH_TERMS} >&2

eval set -- "${FILES}"

test -z "${TMP_DIR}" && TMP_DIR="/tmp"
TMP_DIR="${TMP_DIR}/tmp-${BASENAME}-$$"
mkdir "${TMP_DIR}"

## trap "rm -rf '${TMP_DIR}'" 1 2 3 15
trap "rm -rf '${TMP_DIR}'" HUP INT QUIT TERM

## set -x

if [ "${SEARCH_TERMS}" = "" ]
then 
    cat "$@"
else
    echo "${SEARCH_TERMS}"
    if [ $# -gt 0 ]
    then
        cat "$@"
    fi
fi \
| grep -vP '^\s*$|^#' \
| if [ $URLENCODE  = true ]
then
    perl -MURI::Encode -nle \
        'print URI::Encode::uri_encode($_,{encode_reserved=>1})'\
    | sed 's/%20/+/g'
else
    cat
fi \
| while read SEARCH_TERMS
do
    echo "$0: NOTE, search term :" ${SEARCH_TERMS} >&2

    if [[ "${SEARCH_TERMS}" = "* *" ]]
    then
        echo "$0: WARNING, the search term '${SEARCH_TERMS}' contains" \
             "spaces and will not work" >&2
        echo "$0: WARNING, please URL-encode your search term or" \
             "use '--url-encode' option" >&2
        echo "$0: WARNING, will skip the '${SEARCH_TERMS}' search term" >&2
        continue
    fi
    
    request=query="${SEARCH_TERMS}"
    queryURL="$serverURL/$resourcePATH?$request"
    result="$(curl -sSL "$queryURL&format=json&pageSize=1")"

    n=$(echo "$result" | jq . | awk '/hitCount/{print $2}' | sed 's/,//')

    if [ -z "$n" ]
    then
        echo "$0: ERROR, could not determine the number of hits" >&2
        exit 2
    fi
    
    if [ $HITCOUNT_ONLY = true ]
    then
        echo -e $n"\t"${SEARCH_TERMS}
    else
        if [ "$n" -lt $pageSize ]
        then
            j=1
        else
            j=$(expr $n / $pageSize)
            if [ $(expr $n % $pageSize) -gt 0 ]
            then
                j=$(expr $j + 1)
            fi
        fi
        
        options="format=$format&pageSize=$pageSize"
        cursorMark='*'
        for i in $(seq 1 $j) ;
        do
            result="$($script curl -sSL \
            "$queryURL&cursorMark=$cursorMark&$options")"
            if [ "$script" = "" ]
            then
                echo "$result"
                cursorMark=$(echo "$result" \
                   | jq . | awk '/nextCursorMark/{print $2}' | sed 's/[",]//g')
            fi
        done
    fi
done

## sleep 6

rm -rf "${TMP_DIR}"

