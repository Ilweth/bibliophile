#! /bin/bash
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#* Download bibliographies from Europe-PMC, output into an xml format.  
#**

TMP_DIR="${TMPDIR}"

set -ue
## set -x

Id="$Id$"
FILES=""
BASENAME="$(basename $0)"
SEARCH_TERM=""

serverURL=http://www.ebi.ac.uk
resourcePATH=europepmc/webservices/rest/search
request=query=$SEARCH_TERM
##changed query from crystal+structure
pageSize=1000
cursorMark='*'
options="&pageSize=$pageSize"
queryURL="$serverURL/$resourcePATH?$request$options"
xmlresult="$(curl -sSL "$queryURL&cursorMark=$cursorMark")"

#** USAGE:
#**   $0 --options file1.inp files*.inp
#**
#** OPTIONS:
#**  --version                show the script Id and exit
#**  --help                   print short help message (this message) and exit
#**  --search-term            e.g. --search-term crystal structure 

while [ $# -gt 0 ]
do
    case "$1" in
        --version|--versio|--versi|--vers|--ver|--ve|--v)
            echo $Id
            exit
            ;;
        --help|--hel|--he|--h)     
            awk '/#\*/,/#\*\*/ {
                    sub("^ *#[*]?[*]?", "");
                    gsub("\\$0","'$(basename $0)'");
                    print $0
                }' $0 
	        exit
	        ;;
        --options|--option)
            echo "$0: '--options' is a place-holder; " 
                 "please use '$0 --help' to get the list of available options."
            exit 2
            ;;
        --search-term|--search)
            SEARCH_TERM="$2"
            shift 
            ;;
        -*) echo "$0: unknown option '$1'" >&2 ; exit 1 ;;
        *)  FILES="${FILES} '$1'" ;;
    esac
    shift
done

echo SEARCH_TERM=${SEARCH_TERM}
echo FILES=${FILES}
exit 0

eval set -- "${FILES}"
## puts contents of the variable (files) as arguments of the cmd line

if [ "${SEARCH_TERM}" = "" ]
## checks the variable for content
    then
        cat "$@"
    else 
	    echo "${search_term}"
	    if [ $# -gt 0 ]
	    then 
		    cat "$@"
## @ - puts the content of all files into STDOUT
        fi
fi
 ## pipes it further
| grep -vP '^#|^\s*$' 
## greps everything that is not an empty line or a comment, -v(reverse), P(erl)
| while read TERM
## takes into loop STDOUT and reads it line by line, then each time SEARCH_TERM
## =content of the line

do  
    echo "$xmlresult" 
    cursorMark=$(echo "$xmlresult" \
    | perl -077 -ne 'print $1 if /<nextCursorMark>(.*?)<\/nextCursorMark>/ms')
 
    n=$(echo "$xmlresult" \
    | perl -077 -ne 'print $1 if /<hitCount>(.*?)<\/hitCount>/ms')

    j=$(expr $n / $pageSize)

    echo n=$n
    echo j=$j
    echo cursorMark=$cursorMark

    if [ $(expr $n % $pageSize) -eq 0 ]
    then
        j=$(expr $j - 1)
    fi

    for i in $(seq 1 $j) ;
        do
            xmlresult="$(curl -sSL "$queryURL&cursorMark=$cursorMark")"
            echo "$xmlresult"
            cursorMark=$(echo "$xmlresult" \
            | perl -077 -ne 'print $1 if /<nextCursorMark>(.*?)<\/nextCursorMark>/ms')
            echo i=$i
        done


test -z "${TMP_DIR}" && TMP_DIR="/tmp"
TMP_DIR="${TMP_DIR}/tmp-${BASENAME}-$$"
mkdir "${TMP_DIR}"

## trap "rm -rf '${TMP_DIR}'" 1 2 3 15
trap "rm -rf '${TMP_DIR}'" HUP INT QUIT TERM

set -x

## sleep 6

rm -rf "${TMP_DIR}"
